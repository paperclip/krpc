
.. default-domain:: lua
.. currentmodule:: SpaceCenter

Vessel
======

.. class:: Vessel

   These objects are used to interact with vessels in KSP. This includes getting
   orbital and flight data, manipulating control inputs and managing resources.

   .. attribute:: name

      The name of the vessel.

      :Property: Can be read or written

      :rtype: string

   .. attribute:: type

      The type of the vessel.

      :Property: Can be read or written

      :rtype: :class:`VesselType`

   .. attribute:: situation

      The situation the vessel is in.

      :Property: Read-only, cannot be set

      :rtype: :class:`VesselSituation`

   .. attribute:: met

      The mission elapsed time in seconds.

      :Property: Read-only, cannot be set

      :rtype: number

   .. method:: flight([reference_frame = nil])

      Returns a :class:`Flight` object that can be used to get flight
      telemetry for the vessel, in the specified reference frame.

      :param ReferenceFrame reference_frame: Reference frame. Defaults to the vessel's surface reference frame (:attr:`Vessel.surface_reference_frame`).

      :rtype: :class:`Flight`

   .. attribute:: target

      The target vessel. ``nil`` if there is no target. When
      setting the target, the target cannot be the current vessel.

      :Property: Can be read or written

      :rtype: :class:`Vessel`

   .. attribute:: orbit

      The current orbit of the vessel.

      :Property: Read-only, cannot be set

      :rtype: :class:`Orbit`

   .. attribute:: control

      Returns a :class:`Control` object that can be used to manipulate
      the vessel's control inputs. For example, its pitch/yaw/roll controls,
      RCS and thrust.

      :Property: Read-only, cannot be set

      :rtype: :class:`Control`

   .. attribute:: auto_pilot

      An :class:`AutoPilot` object, that can be used to perform
      simple auto-piloting of the vessel.

      :Property: Read-only, cannot be set

      :rtype: :class:`AutoPilot`

   .. attribute:: resources

      A :class:`Resources` object, that can used to get information
      about resources stored in the vessel.

      :Property: Read-only, cannot be set

      :rtype: :class:`Resources`

   .. method:: resources_in_decouple_stage(stage, [cumulative = True])

      Returns a :class:`Resources` object, that can used to get
      information about resources stored in a given *stage*.

      :param number stage: Get resources for parts that are decoupled in this stage.

      :param boolean cumulative: When ``False``, returns the resources for parts decoupled in just the given stage. When ``True`` returns the resources decoupled in the given stage and all subsequent stages combined.

      :rtype: :class:`Resources`

      .. note:: For details on stage numbering, see the
                discussion on :ref:`lua-api-parts-staging`.

   .. attribute:: parts

      A :class:`Parts` object, that can used to interact with the parts that make up this vessel.

      :Property: Read-only, cannot be set

      :rtype: :class:`Parts`

   .. attribute:: comms

      A :class:`Comms` object, that can used to interact with RemoteTech for this vessel.

      :Property: Read-only, cannot be set

      :rtype: :class:`Comms`

      .. note::

         Requires `RemoteTech <http://forum.kerbalspaceprogram.com/threads/83305>`_ to be installed.

   .. attribute:: mass

      The total mass of the vessel, including resources, in kg.

      :Property: Read-only, cannot be set

      :rtype: number

   .. attribute:: dry_mass

      The total mass of the vessel, excluding resources, in kg.

      :Property: Read-only, cannot be set

      :rtype: number

   .. attribute:: thrust

      The total thrust currently being produced by the vessel's engines, in
      Newtons. This is computed by summing :attr:`Engine.thrust` for
      every engine in the vessel.

      :Property: Read-only, cannot be set

      :rtype: number

   .. attribute:: available_thrust

      Gets the total available thrust that can be produced by the vessel's
      active engines, in Newtons. This is computed by summing
      :attr:`Engine.available_thrust` for every active engine in the vessel.

      :Property: Read-only, cannot be set

      :rtype: number

   .. attribute:: max_thrust

      The total maximum thrust that can be produced by the vessel's active
      engines, in Newtons. This is computed by summing
      :attr:`Engine.max_thrust` for every active engine.

      :Property: Read-only, cannot be set

      :rtype: number

   .. attribute:: max_vacuum_thrust

      The total maximum thrust that can be produced by the vessel's active
      engines when the vessel is in a vacuum, in Newtons. This is computed by
      summing :attr:`Engine.max_vacuum_thrust` for every active engine.

      :Property: Read-only, cannot be set

      :rtype: number

   .. attribute:: specific_impulse

      The combined specific impulse of all active engines, in seconds. This is computed using the formula
      `described here <http://wiki.kerbalspaceprogram.com/wiki/Specific_impulse#Multiple_engines>`_.

      :Property: Read-only, cannot be set

      :rtype: number

   .. attribute:: vacuum_specific_impulse

      The combined vacuum specific impulse of all active engines, in seconds. This is computed using the formula
      `described here <http://wiki.kerbalspaceprogram.com/wiki/Specific_impulse#Multiple_engines>`_.

      :Property: Read-only, cannot be set

      :rtype: number

   .. attribute:: kerbin_sea_level_specific_impulse

      The combined specific impulse of all active engines at sea level on Kerbin, in seconds.
      This is computed using the formula
      `described here <http://wiki.kerbalspaceprogram.com/wiki/Specific_impulse#Multiple_engines>`_.

      :Property: Read-only, cannot be set

      :rtype: number

   .. attribute:: reference_frame

      The reference frame that is fixed relative to the vessel, and orientated with the vessel.

      * The origin is at the center of mass of the vessel.
      * The axes rotate with the vessel.
      * The x-axis points out to the right of the vessel.
      * The y-axis points in the forward direction of the vessel.
      * The z-axis points out of the bottom off the vessel.

      :Property: Read-only, cannot be set

      :rtype: :class:`ReferenceFrame`

      :rtype: :class:`ReferenceFrame`

      .. figure:: /images/reference-frames/vessel-aircraft.png
         :align: center

         Vessel reference frame origin and axes for the Aeris 3A aircraft

      .. figure:: /images/reference-frames/vessel-rocket.png
         :align: center

         Vessel reference frame origin and axes for the Kerbal-X rocket

   .. attribute:: orbital_reference_frame

      The reference frame that is fixed relative to the vessel, and orientated with the vessels
      orbital prograde/normal/radial directions.

      * The origin is at the center of mass of the vessel.
      * The axes rotate with the orbital prograde/normal/radial directions.
      * The x-axis points in the orbital anti-radial direction.
      * The y-axis points in the orbital prograde direction.
      * The z-axis points in the orbital normal direction.

      :Property: Read-only, cannot be set

      :rtype: :class:`ReferenceFrame`

      .. note::

         Be careful not to confuse this with 'orbit' mode on the navball.

      .. figure:: /images/reference-frames/vessel-orbital.png
         :align: center

         Vessel orbital reference frame origin and axes

   .. attribute:: surface_reference_frame

      The reference frame that is fixed relative to the vessel, and orientated with the surface
      of the body being orbited.

      * The origin is at the center of mass of the vessel.
      * The axes rotate with the north and up directions on the surface of the body.
      * The x-axis points in the `zenith <http://en.wikipedia.org/wiki/Zenith>`_
        direction (upwards, normal to the body being orbited, from the center of the body towards the center of
        mass of the vessel).
      * The y-axis points northwards towards the
        `astronomical horizon <http://en.wikipedia.org/wiki/Horizon>`_ (north, and tangential to the
        surface of the body -- the direction in which a compass would point when on the surface).
      * The z-axis points eastwards towards the
        `astronomical horizon <http://en.wikipedia.org/wiki/Horizon>`_ (east, and tangential to the
        surface of the body -- east on a compass when on the surface).

      :Property: Read-only, cannot be set

      :rtype: :class:`ReferenceFrame`

      .. note::

         Be careful not to confuse this with 'surface' mode on the navball.

      .. figure:: /images/reference-frames/vessel-surface.png
         :align: center

         Vessel surface reference frame origin and axes

   .. attribute:: surface_velocity_reference_frame

      The reference frame that is fixed relative to the vessel, and orientated with the velocity
      vector of the vessel relative to the surface of the body being orbited.

      * The origin is at the center of mass of the vessel.
      * The axes rotate with the vessel's velocity vector.
      * The y-axis points in the direction of the vessel's velocity vector,
        relative to the surface of the body being orbited.
      * The z-axis is in the plane of the
        `astronomical horizon <http://en.wikipedia.org/wiki/Horizon>`_.
      * The x-axis is orthogonal to the other two axes.

      :Property: Read-only, cannot be set

      :rtype: :class:`ReferenceFrame`

      .. figure:: /images/reference-frames/vessel-surface-velocity.png
         :align: center

         Vessel surface velocity reference frame origin and axes

   .. method:: position(reference_frame)

      Returns the position vector of the center of mass of the vessel in the given reference frame.

      :param ReferenceFrame reference_frame:

      :rtype: tuple of (number, number, number)

   .. method:: velocity(reference_frame)

      Returns the velocity vector of the center of mass of the vessel in the given reference frame.

      :param ReferenceFrame reference_frame:

      :rtype: tuple of (number, number, number)

   .. method:: rotation(reference_frame)

      Returns the rotation of the center of mass of the vessel in the given reference frame.

      :param ReferenceFrame reference_frame:

      :rtype: tuple of (number, number, number, number)

   .. method:: direction(reference_frame)

      Returns the direction in which the vessel is pointing, as a unit vector, in the given reference frame.

      :param ReferenceFrame reference_frame:

      :rtype: tuple of (number, number, number)

   .. method:: angular_velocity(reference_frame)

      Returns the angular velocity of the vessel in the given reference frame. The magnitude of the returned
      vector is the rotational speed in radians per second, and the direction of the vector indicates the
      axis of rotation (using the right hand rule).

      :param ReferenceFrame reference_frame:

      :rtype: tuple of (number, number, number)


.. class:: VesselType

   See :attr:`Vessel.type`.

   .. data:: ship

      Ship.

   .. data:: station

      Station.

   .. data:: lander

      Lander.

   .. data:: probe

      Probe.

   .. data:: rover

      Rover.

   .. data:: base

      Base.

   .. data:: debris

      Debris.

.. class:: VesselSituation

   See :attr:`Vessel.situation`.

   .. data:: docked

      Vessel is docked to another.

   .. data:: escaping

      Escaping.

   .. data:: flying

      Vessel is flying through an atmosphere.

   .. data:: landed

      Vessel is landed on the surface of a body.

   .. data:: orbiting

      Vessel is orbiting a body.

   .. data:: pre_launch

      Vessel is awaiting launch.

   .. data:: splashed

      Vessel has splashed down in an ocean.

   .. data:: sub_orbital

      Vessel is on a sub-orbital trajectory.


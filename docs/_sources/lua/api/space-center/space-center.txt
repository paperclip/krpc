
.. default-domain:: lua
.. currentmodule:: SpaceCenter

SpaceCenter
===========

.. class:: SpaceCenter

   Provides functionality to interact with Kerbal Space Program. This includes controlling
   the active vessel, managing its resources, planning maneuver nodes and auto-piloting.

   .. attribute:: active_vessel

      The currently active vessel.

      :Property: Can be read or written

      :rtype: :class:`Vessel`


   .. attribute:: vessels

      A list of all the vessels in the game.

      :Property: Read-only, cannot be set

      :rtype: list of :class:`Vessel`


   .. attribute:: bodies

      A dictionary of all celestial bodies (planets, moons, etc.) in the game,
      keyed by the name of the body.

      :Property: Read-only, cannot be set

      :rtype: dict from string to :class:`CelestialBody`


   .. attribute:: target_body

      The currently targeted celestial body.

      :Property: Can be read or written

      :rtype: :class:`CelestialBody`


   .. attribute:: target_vessel

      The currently targeted vessel.

      :Property: Can be read or written

      :rtype: :class:`Vessel`


   .. attribute:: target_docking_port

      The currently targeted docking port.

      :Property: Can be read or written

      :rtype: :class:`DockingPort`


   .. staticmethod:: clear_target()

      Clears the current target.


   .. staticmethod:: launch_vessel_from_vab(name)

      Launch a new vessel from the VAB onto the launchpad.

      :param string name: Name of the vessel's craft file.


   .. staticmethod:: launch_vessel_from_sph(name)

      Launch a new vessel from the SPH onto the runway.

      :param string name: Name of the vessel's craft file.


   .. attribute:: ut

      The current universal time in seconds.

      :Property: Read-only, cannot be set

      :rtype: number


   .. attribute:: g

      The value of the `gravitational constant <http://en.wikipedia.org/wiki/Gravitational_constant>`_
      G in :math:`N(m/kg)^2`.

      :Property: Read-only, cannot be set

      :rtype: number


   .. attribute:: warp_mode

      The current time warp mode. Returns :attr:`WarpMode.none` if time
      warp is not active, :attr:`WarpMode.rails` if regular "on-rails" time warp
      is active, or :attr:`WarpMode.physics` if physical time warp is active.

      :Property: Read-only, cannot be set

      :rtype: :class:`WarpMode`


   .. attribute:: warp_rate

      The current warp rate. This is the rate at which time is passing for
      either on-rails or physical time warp. For example, a value of 10 means
      time is passing 10x faster than normal. Returns 1 if time warp is not
      active.

      :Property: Read-only, cannot be set

      :rtype: number


   .. attribute:: warp_factor

      The current warp factor. This is the index of the rate at which time
      is passing for either regular "on-rails" or physical time warp. Returns 0
      if time warp is not active. When in on-rails time warp, this is equal to
      :attr:`rails_warp_factor`, and in physics time warp, this is equal to
      :attr:`physics_warp_factor`.

      :Property: Read-only, cannot be set

      :rtype: number


   .. attribute:: rails_warp_factor

      The time warp rate, using regular "on-rails" time warp. A value between
      0 and 7 inclusive. 0 means no time warp. Returns 0 if physical time warp
      is active.
      If requested time warp factor cannot be set, it will be set to the next
      lowest possible value. For example, if the vessel is too close to a
      planet. See `the KSP wiki <http://wiki.kerbalspaceprogram.com/wiki/Time_warp>`_ for details.

      :Property: Can be read or written

      :rtype: number


   .. attribute:: physics_warp_factor

      The physical time warp rate. A value between 0 and 3 inclusive. 0 means
      no time warp. Returns 0 if regular "on-rails" time warp is active.

      :Property: Can be read or written

      :rtype: number


   .. staticmethod:: can_rails_warp_at([factor = 1])

      Returns ``True`` if regular "on-rails" time warp can be used, at the specified warp
      *factor*. The maximum time warp rate is limited by various things,
      including how close the active vessel is to a planet. See
      `the KSP wiki <http://wiki.kerbalspaceprogram.com/wiki/Time_warp>`_ for details.

      :param number factor: The warp factor to check.

      :rtype: boolean


   .. attribute:: maximum_rails_warp_factor

      The current maximum regular "on-rails" warp factor that can be set.
      A value between 0 and 7 inclusive.  See
      `the KSP wiki <http://wiki.kerbalspaceprogram.com/wiki/Time_warp>`_ for details.

      :Property: Read-only, cannot be set

      :rtype: number


   .. staticmethod:: warp_to(ut, [max_rails_rate = 100000], [max_physics_rate = 2])

      Uses time acceleration to warp forward to a time in the future, specified
      by universal time *ut*. This call blocks until the desired
      time is reached. Uses regular "on-rails" or physical time warp as appropriate.
      For example, physical time warp is used when the active vessel is traveling
      through an atmosphere. When using regular "on-rails" time warp, the warp
      rate is limited by *max_rails_rate*, and when using physical
      time warp, the warp rate is limited by *max_physics_rate*.

      :param number ut: The universal time to warp to, in seconds.

      :param number max_rails_rate: The maximum warp rate in regular "on-rails" time warp.

      :param number max_physics_rate: The maximum warp rate in physical time warp.

      :returns: When the time warp is complete.


   .. staticmethod:: transform_position(position, from, to)

      Converts a position vector from one reference frame to another.

      :param tuple position: Position vector in reference frame *from*.

      :param ReferenceFrame from: The reference frame that the position vector is in.

      :param ReferenceFrame to: The reference frame to covert the position vector to.

      :returns: The corresponding position vector in reference frame *to*.

      :rtype: tuple of (number, number, number)


   .. staticmethod:: transform_direction(direction, from, to)

      Converts a direction vector from one reference frame to another.

      :param tuple direction: Direction vector in reference frame *from*.

      :param ReferenceFrame from: The reference frame that the direction vector is in.

      :param ReferenceFrame to: The reference frame to covert the direction vector to.

      :returns: The corresponding direction vector in reference frame *to*.

      :rtype: tuple of (number, number, number)


   .. staticmethod:: transform_rotation(rotation, from, to)

      Converts a rotation from one reference frame to another.

      :param tuple rotation: Rotation in reference frame *from*.

      :param ReferenceFrame from: The reference frame that the rotation is in.

      :param ReferenceFrame to: The corresponding rotation in reference frame *to*.

      :returns: The corresponding rotation in reference frame *to*.

      :rtype: tuple of (number, number, number, number)


   .. staticmethod:: transform_velocity(position, velocity, from, to)

      Converts a velocity vector (acting at the specified position vector) from one
      reference frame to another. The position vector is required to take the
      relative angular velocity of the reference frames into account.

      :param tuple position: Position vector in reference frame *from*.

      :param tuple velocity: Velocity vector in reference frame *from*.

      :param ReferenceFrame from: The reference frame that the position and velocity vectors are in.

      :param ReferenceFrame to: The reference frame to covert the velocity vector to.

      :returns: The corresponding velocity in reference frame *to*.

      :rtype: tuple of (number, number, number)


   .. attribute:: far_available

      Whether `Ferram Aerospace Research <http://forum.kerbalspaceprogram.com/threads/20451>`_ is installed.

      :Property: Read-only, cannot be set

      :rtype: boolean


   .. attribute:: remote_tech_available

      Whether `RemoteTech <http://forum.kerbalspaceprogram.com/threads/83305>`_ is installed.

      :Property: Read-only, cannot be set

      :rtype: boolean


   .. staticmethod:: draw_direction(direction, reference_frame, color, [length = 10])

      Draw a direction vector on the active vessel.

      :param tuple direction: Direction to draw the line in.

      :param ReferenceFrame reference_frame: Reference frame that the direction is in.

      :param tuple color: The color to use for the line, as an RGB color.

      :param number length: The length of the line. Defaults to 10.


   .. staticmethod:: draw_line(start, end, reference_frame, color)

      Draw a line.

      :param tuple start: Position of the start of the line.

      :param tuple end: Position of the end of the line.

      :param ReferenceFrame reference_frame: Reference frame that the position are in.

      :param tuple color: The color to use for the line, as an RGB color.


   .. staticmethod:: clear_drawing()

      Remove all directions and lines currently being drawn.



.. class:: WarpMode

   Returned by :attr:`warp_mode`

   .. data:: rails

      Time warp is active, and in regular "on-rails" mode.

   .. data:: physics

      Time warp is active, and in physical time warp mode.

   .. data:: none

      Time warp is not active.

